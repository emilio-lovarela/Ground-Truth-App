color_palette = [0, 0, 0, 215, 255, 175, 215, 215, 255, 238, 238, 238, 175, 135, 255, 255, 135, 175, 255, 255, 0, 135, 255, 215, 255, 215, 175, 175, 0, 95, 215, 0, 215, 255, 95, 255, 255, 135, 255, 255, 215, 135, 0, 0, 95, 95, 135, 135, 175, 215, 215, 215, 255, 255, 135, 95, 0, 95, 215, 0, 135, 215, 0, 135, 0, 175, 175, 0, 215, 215, 95, 0, 215, 95, 135, 215, 135, 95, 215, 175, 0, 215, 0, 135, 255, 0, 215, 255, 0, 175, 255, 95, 215, 255, 175, 135, 128, 0, 0, 128, 128, 0, 0, 128, 128, 192, 192, 192, 0, 255, 0, 255, 0, 255, 0, 175, 135, 0, 215, 215, 0, 215, 255, 0, 255, 215, 95, 135, 0, 95, 215, 215, 95, 255, 255, 135, 95, 95, 135, 95, 135, 135, 135, 95, 135, 215, 215, 135, 255, 0, 135, 255, 255, 175, 95, 175, 175, 135, 0, 175, 135, 135, 175, 175, 95, 175, 255, 255, 215, 95, 175, 215, 135, 0, 215, 135, 135, 215, 135, 175, 215, 135, 215, 215, 135, 255, 215, 175, 95, 215, 175, 135, 215, 175, 175, 215, 175, 215, 215, 175, 255, 215, 215, 95, 215, 255, 215, 255, 0, 95, 255, 0, 255, 255, 135, 0, 255, 135, 135, 255, 175, 0, 255, 175, 95, 255, 175, 175, 255, 175, 215, 255, 175, 255, 255, 215, 0, 255, 215, 215, 255, 215, 255, 255, 255, 95, 255, 255, 135, 255, 255, 175, 255, 255, 215, 215, 255, 135, 175, 215, 255, 228, 228, 228, 175, 135, 215, 255, 95, 135, 215, 255, 0, 95, 255, 215, 175, 175, 135, 135, 0, 95, 215, 0, 175, 215, 95, 255, 255, 135, 215, 255, 215, 95, 0, 0, 128, 0, 135, 135, 0, 215, 175, 0, 255, 255, 95, 95, 0, 95, 175, 0, 95, 255, 0, 135, 0, 135, 135, 0, 215, 175, 95, 0, 175, 95, 135, 175, 135, 95, 175, 175, 0, 215, 0, 95, 215, 0, 255, 255, 0, 135, 255, 95, 175, 255, 135, 95, 215, 255, 95, 175, 175, 255, 218, 218, 218, 175, 95, 255, 255, 95, 95, 215, 215, 175, 95, 215, 175, 255, 255, 255, 95, 0, 95, 175, 0, 175, 175, 95, 215, 215, 95, 215, 215, 215, 135, 175, 255, 215, 175, 175, 215, 208, 208, 208, 175, 0, 255, 255, 95, 0, 215, 215, 0, 0, 255, 255, 175, 255, 175, 135, 215, 255, 198, 198, 198, 135, 135, 215, 255, 0, 0, 175, 215, 0, 175, 255, 135, 135, 175, 255, 188, 188, 188, 135, 95, 215, 215, 95, 95, 135, 175, 0, 175, 255, 95, 135, 175, 215, 178, 178, 178, 135, 95, 175, 215, 0, 0, 135, 135, 0, 175, 255, 0, 135, 175, 175, 168, 168, 168, 135, 0, 255, 175, 95, 95, 255, 255, 0, 175, 215, 175, 135, 135, 255, 158, 158, 158, 95, 95, 135, 175, 0, 135, 175, 215, 135, 135, 95, 255, 148, 148, 148, 95, 0, 215, 175, 0, 0, 175, 215, 95, 95, 215, 255, 138, 138, 138, 95, 0, 175, 135, 0, 0, 135, 255, 175, 95, 175, 255, 128, 128, 128, 95, 0, 135, 95, 0, 0, 135, 255, 135, 95, 175, 215, 118, 118, 118, 128, 0, 128, 255, 0, 0, 135, 255, 95, 95, 175, 175, 108, 108, 108, 135, 215, 175, 95, 175, 135, 98, 98, 98, 135, 215, 135, 95, 135, 255, 88, 88, 88, 135, 215, 95, 95, 135, 215, 78, 78, 78, 135, 175, 135, 95, 135, 175, 68, 68, 68, 135, 175, 95, 95, 95, 255, 58, 58, 58, 95, 255, 175, 95, 95, 215, 48, 48, 48, 95, 255, 135, 95, 95, 175, 38, 38, 38, 95, 255, 95, 95, 0, 255, 28, 28, 28, 95, 215, 135, 0, 175, 255, 18, 18, 18, 95, 215, 95, 0, 175, 215, 8, 8, 8, 95, 175, 95, 0, 135, 255, 255, 255, 255, 95, 135, 95, 0, 135, 215, 215, 215, 215, 0, 255, 175, 0, 135, 175, 175, 175, 175, 0, 255, 135, 0, 95, 255, 175, 135, 175, 0, 255, 95, 0, 95, 215, 135, 135, 175, 0, 255, 0, 0, 95, 175, 135, 135, 135, 0, 215, 135, 0, 95, 135, 95, 95, 95, 0, 215, 95, 0, 95, 95, 0, 0, 0, 0, 215, 0, 0, 0, 255, 128, 128, 128, 0, 175, 175, 0, 0, 215, 0, 175, 95, 0, 0, 175, 0, 175, 0, 0, 0, 135, 0, 135, 95, 0, 0, 255, 0, 135, 0, 0, 95, 0, 0, 128, 0]
text_render_size = {'q': 11.1, 'e': 11.1, 'u': 11.1, 'o': 11.1, 'p': 11.1, 'a': 11.1, 'd': 11.1, 'g': 11.1, 'h': 11.1, 'b': 11.1, 'n': 11.1, '1': 11.1, '2': 11.1, '3': 11.1, '4': 11.1, '5': 11.1, '6': 11.1, '7': 11.1, '8': 11.1, '9': 11.1, '0': 11.1, '+': 11.1, 'v': 10.1, 'c': 10.1, 'x': 10.1, 'z': 10.1, 'k': 10.1, 's': 10.1, '<': 10.1, 'r': 7.2, 't': 7.2, 'f': 7.2, 'l': 5.1, 'j': 5.1, 'i': 5.1, '.': 5.1, 'w': 15.2, 'm': 18.0, ',': 4.2, ' ': 4.2, '-': 9.3, '_': 9.3}
text_labels = {
	'Clasification': "- Click on a class to tag the image.\n\n- The tags are saved in a JSON file named as the folder that contains the images or as the compressed zip file.\n\n- The JSON format is (image name) [tag = tagname]\n\n- If caption is active the format is [tag = tagname, caption = captionname]",
	'Bounding_boxes': "- Draw rectangles with a single click/move for the selected class.\n\n- Pressing save will create a folder if it does not exist with the name of the 'folder containing the images (or zip) + _csv'.\n\n- In this folder a CSV is stored with the name of the image in which each row represents an instance with the format 'class x y w h caption'. The separator is tab.\n\n- Caption is an optional parameter, the rest correspond to: x and y are the coordinates of the bottom left point, while w and h represent the width and height...",
	'Segmentation': "- Draw the outline of the object with lines. The object outline is always closed before moving on to the next.\n\n- When saving if it does not exist, a folder is created with the name 'name of the folder that contains the images + _masks'. The image masks are saved with the image name + _mask in png format (Type P 8 bits, with its own color palette).\n\n- If there are more than two classes, a CSV 'name + _csv_tag_color' is generated where each line represents a class and the value of the pixel associated with it. Example background 0, dog 1, cat 2 ... If caption is active a csv is created.",
	'Instance': "- Works the same as semantic segmentation mode with some subtle changes.\n\n- New contour allows you to draw separate contours that belong to the same instance. This is necessary to calculate the bounding boxes correctly.\n\n- In addition to what is saved in semantic segmentation mode, bounding boxes are calculated automatically and a csv is generated per image that saves the same as in object detection mode."
}