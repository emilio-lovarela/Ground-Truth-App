<LinePlay>:
	image_car: image1
	slider_max: slimax
	anla_ya: anlaya
	tog_bu: Tog
	switchid: switch
	tex_co: tex_con
	saved_button: save_button
	orientation: 'tb-rl'

    AnchorLayout:
    	id: anlaya
		size_hint: .7, 1
        pos: self.pos
	    
	    AsyncImage:
	    	id: image1
	    	nocache: True
	    	source: root.img
	    	size_hint: None, None
	    	size: 809, 779
	    	allow_stretch: True
        	keep_ratio: True

	    	canvas.after:
		        Color:
        			rgba: tuple(root.class_color)
		        Line:
		            points: root.points
		            close: root.close

    BoxLayout:
    	orientation: 'vertical'
		size_hint: .3, 1
	    pos: self.pos
		
		BoxLayout:
			size_hint: 1, .2
		    pos: self.pos
		
			Label:
				text: root.file_name
				valign: "top"
				halign: "center"
				font_size: 30
				color: 1,0,1,1

		RelativeLayout:
			size_hint: 1, .1
		    pos: self.pos
		
			Button:
				text: 'Select Folder'
				size_hint: .8, 1
				pos_hint: {'center_x': .5, 'center_y': .55}
				font_size: 30
				color: 1,1,0,1
				on_press: root.fire_popup(root.obj, "filechooser") if root.dropbox == False else root.fire_popup(root.dropbox_class, "dropbox")

		BoxLayout:
			size_hint: 1, .1
		    pos: self.pos
		
			Label:
				text: root.class_name
				font_size: 23
				color: tuple(root.class_color)

	    GridLayout:
	    	orientation: 'vertical'
	    	spacing: 3,3
	    	cols: 2
			size_hint: 1, 1
		    pos: self.pos
		
		    Label:
		        text: 'Filter used images'
		    Switch:
		        id: switch
		        disabled: True
		        on_active: root.filter_images(switch.active)

			Label:
				text: 'Image ' + str(int(slimax.value) + 1) + "/" + str(slimax.max + 1)

		    Slider:
		    	id: slimax
		    	# Reiniciate all to default
		    	value: 0
		    	on_value: root.tex_control = ""
		    	on_value: root.changeimage(self.value, volmax.value) if root.drop_filt == False else True
		    	on_value: root.points = []
	            on_value: root.lpoints = []
	            on_value: root.final_points = []
	            on_value: root.final_lpoints = []
	            on_value: root.colors_lis = []
	            on_value: root.bounding_csv = []
	            on_value: root.wait_cont = []
	            on_value: root.canvas.remove_group('Lines')
	            on_value: Tog.state = 'normal'
	            on_value: root.ori_size = image1.size
	            on_value: anlaya.do_layout()
		    	min: 0
		    	max: root.LImages
		    	step: 1

		    Label:
	            text: '4 dimension'
	            disabled: root.vol_dimension
	            
	        Slider:
	        	id: volmax
	        	disabled: root.vol_dimension
	            value: 0
	            on_value: root.changeimage(slimax.value, self.value)
	            min: 0
		    	max: root.max_dime

	        Button:
	            size_hint: 1, 1
	            text: 'Options'
	            background_color: 51/255, 255/255, 121/255, .8
	            background_normal: ''
	            color: 0,0,0,1
	            disabled: True if root.tex_control == "Contour mode" else False
	            on_press: root.tex_control = ""
	            on_press: root.fire_popup(root.options_class, "options")

	        Button:
				size_hint: 1, 1
	            text: 'Change Class'
	            color: 0,0,0,1
	            background_color: tuple(root.class_color)
	            background_normal: ''
	            disabled: True if root.tex_control == "Contour mode" else False
	            on_press: root.fire_popup(root.change_class, "chan_class")
	            on_press: root.write_mode = True

	        Button:
				size_hint: 1, 1
	            text: 'New Contour'
	            background_color: 51/255, 255/255, 121/255, .8
	            background_normal: ''
	            color: 0,0,0,1
	            disabled: False if root.mode == 'Instance' else True
	            on_press: root.new_contour()
	            on_press: Tog.state = 'normal'

	        Button:
				size_hint: 1, 1
	            text: 'New Instance'
	            background_color: 51/255, 255/255, 121/255, 1
	            background_normal: ''
	            color: 0,0,0,1
	            disabled: True if root.mode == 'Clasification' else False
	            on_press: root.new_line(True)
	            on_press: Tog.state = 'normal'

	        Button:
	        	id: save_button
	        	size_hint: 1, 1
	            text: 'Save Mask'
	            background_color: 51/255, 219/255, 255/255, 1
	            background_normal: ''
	            color: 0,0,0,1
	            disabled: True if root.disa == True or root.tex_control == "Contour mode" or root.mode == 'Clasification' else False
	            on_press: root.save_image()

	        Label:
	        	id: tex_con
	        	text: root.tex_control
	        	font_size: 20
				color: 1,0,1,1

	        Button:
	            size_hint: 1, 1
	            text: 'Del Instance'
	            background_color: 248/255, 255/255, 51/255, .9
	            background_normal: ''
	            color: 0,0,0,1
	            disabled: True if root.tex_control == "Contour mode" or root.mode == 'Clasification' else False
	            on_press: root.undo_instance()
	            on_press: root.tex_control = ""

	        Button:
	    		size_hint: 1, 1
	            text: 'Undo Point'
	            background_color: 248/255, 255/255, 51/255, 1
	            background_normal: ''
	            color: 0,0,0,1
	            disabled: True if root.mode == 'Bounding_boxes' or root.mode == 'Clasification' else False
	            on_press: None if not root.points else root.points.pop()

			Button:
	    		size_hint: 1, 1
	            text: 'Clear All'
	            background_color: 248/255, 255/255, 51/255, .9
	            background_normal: ''
	            color: 0,0,0,1
	            on_press: root.final_points = []
	            on_press: root.final_lpoints = []
	            on_press: root.canvas.remove_group('Lines')
	            on_press: root.points = []
	            on_press: root.lpoints = []
	            on_press: root.colors_lis = []
	            on_press: root.bounding_csv = []
	            on_press: root.wait_cont = []
	            on_press: root.tex_control = ""

	        ToggleButton:
	        	id: Tog
	        	size_hint: 1, 1
	            text: 'Close Line'
	            background_color: 248/255, 255/255, 51/255, .9
	            background_normal: ''
	            color: 0,0,0,1
	            disabled: True if root.mode == 'Bounding_boxes' or root.mode == 'Clasification' else False
	            on_press: root.close = self.state == 'down'